import random
from typing import List, Tuple, Optional
import os
import time

class TicTacToe:
    def __init__(self):
        self.board = [[' ' for _ in range(3)] for _ in range(3)]
        self.scores = {'X': 0, 'O': 0}
        self.current_player = 'X'
        self.ai_mode = True  # Changed to True by default since it's Player vs AI
        self.first_game = True  # Add this new variable
        self.player_name = "Player"
        self.ai_name = "AI"

    def display_board(self):
        os.system('cls' if os.name == 'nt' else 'clear')
        print('\n')
        print('╔════════════════════════════════╗')
        print('║         SCOREBOARD             ║')
        print('╠════════════════════════════════╣')
        print(f'║  {self.player_name} (X): {self.scores["X"]:^14}    ║     ')
        print(f'║  {self.ai_name} (O): {self.scores["O"]:^14}      ║     ')
        print('╚════════════════════════════════╝')
        print('\n')
        print('       0       1       2    ')
        print('   ╔═══════╦═══════╦═══════╗')
        for i, row in enumerate(self.board):
            print(f' {i} ║   {row[0]}   ║   {row[1]}   ║   {row[2]}   ║')
            if i < 2:
                print('   ╠═══════╬═══════╬═══════╣')
        print('   ╚═══════╩═══════╩═══════╝\n')

    def make_move(self, row: int, col: int) -> bool:
        if self.board[row][col] == ' ':
            self.board[row][col] = self.current_player
            return True
        return False

    def check_winner(self) -> Optional[str]:
        # Check rows, columns and diagonals
        for i in range(3):
            if self.board[i][0] == self.board[i][1] == self.board[i][2] != ' ':
                return self.board[i][0]
            if self.board[0][i] == self.board[1][i] == self.board[2][i] != ' ':
                return self.board[0][i]
        
        if self.board[0][0] == self.board[1][1] == self.board[2][2] != ' ':
            return self.board[0][0]
        if self.board[0][2] == self.board[1][1] == self.board[2][0] != ' ':
            return self.board[0][2]
        
        return None

    def is_board_full(self) -> bool:
        return all(all(cell != ' ' for cell in row) for row in self.board)

    def minimax(self, board, depth, is_maximizing):
        scores = {'O': 1, 'X': -1, 'tie': 0}
        
        winner = self.check_winner()
        if winner:
            return scores[winner]
        if self.is_board_full():
            return scores['tie']
            
        if is_maximizing:
            best_score = float('-inf')
            for i in range(3):
                for j in range(3):
                    if board[i][j] == ' ':
                        board[i][j] = 'O'
                        score = self.minimax(board, depth + 1, False)
                        board[i][j] = ' '
                        best_score = max(score, best_score)
            return best_score
        else:
            best_score = float('inf')
            for i in range(3):
                for j in range(3):
                    if board[i][j] == ' ':
                        board[i][j] = 'X'
                        score = self.minimax(board, depth + 1, True)
                        board[i][j] = ' '
                        best_score = min(score, best_score)
            return best_score

    def ai_move(self) -> Tuple[int, int]:
        best_score = float('-inf')
        best_move = (0, 0)
        
        for i in range(3):
            for j in range(3):
                if self.board[i][j] == ' ':
                    self.board[i][j] = 'O'
                    score = self.minimax(self.board, 0, False)
                    self.board[i][j] = ' '
                    if score > best_score:
                        best_score = score
                        best_move = (i, j)
        
        return best_move

    def play_game(self):
        if self.first_game:
            print("\nAJA LVDE TIC TAC TOE KHELTE HAI!!!")
            self.player_name = input("Apna name bta: ")
            print(f"\nToh sunn {self.player_name}! You'll be X and AI will be O")
            print("Get ready to lose!!!!!!!! >:)")
            time.sleep(2)

            print("Iss baar hara ke dikha wo corner me x krke >:)")
            time.sleep(2)

            self.first_game = False
        
        while True:
            self.display_board()
            
            if self.current_player == 'O':  # AI's turn
                print("Sochne deeee...")
                time.sleep(3)
                row, col = self.ai_move()
            else:  # Player's turn
                try:
                    print(f"Your turn ({self.player_name})")
                    row = int(input("Enter row (0-2): "))
                    col = int(input("Enter column (0-2): "))
                    if not (0 <= row <= 2 and 0 <= col <= 2):
                        print("abe chutiya hai kya! enter numbers between 0 and 2.")
                        time.sleep(1)
                        continue
                except ValueError:
                    print("bdwi gaand! enter valid numbers.")
                    time.sleep(1)
                    continue

            if not self.make_move(row, col):
                print("andhe udar pehele se hai kuch!")
                time.sleep(1)
                continue

            winner = self.check_winner()
            if winner:
                self.scores[winner] += 1
                self.display_board()
                if winner == 'X':
                    print(f"\njaa jeetne diya {self.player_name}! 🎉")
                else:
                    print("\newww!!! latak jao beta yahi moka hai! 😈")
                break
            elif self.is_board_full():
                self.display_board()
                print("\nchii isse bhi nhi hara paya!!!")
                break

            self.current_player = 'O' if self.current_player == 'X' else 'X'

        play_again = input("\nek aur round???? (y/n): ").lower()
        if play_again == 'y':
            self.board = [[' ' for _ in range(3)] for _ in range(3)]
            self.current_player = 'X'
            self.play_game()

if __name__ == "__main__":
    game = TicTacToe()
    game.play_game()
